{
  "endpoints": {
    "/channels/in_app/inbox/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listInboxTokens({\n      limit: 3,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, InboxToken } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const inboxToken: InboxToken = {\t\n    connectionId: \"connection_id\",\n    token: \"deserunt nulla \"\n  };\n\n  const { data } = await client.channels.saveInboxToken(inboxToken);\n\n  console.log(data);\n})();\n"
    },
    "/channels/in_app/inbox/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchInboxToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteInboxToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/apns/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listApnsTokens({\n      limit: 123,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { ApnsTokenPayload, Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const apnsTokenPayloadInstallationId = ApnsTokenPayloadInstallationId.DEVELOPMENT;\n  \n  const apnsTokenPayload: ApnsTokenPayload = {\t\n    appId: \"app_id\",\n    deviceToken: \"adipisicingoffi\",\n    installationId: apnsTokenPayloadInstallationId\n  };\n\n  const { data } = await client.channels.saveApnsToken(apnsTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/apns/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchApnsToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteApnsToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/expo/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listExpoTokens({\n      limit: 3,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, ExpoTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const expoTokenPayload: ExpoTokenPayload = {\t\n    deviceToken: \"device_token\"\n  };\n\n  const { data } = await client.channels.saveExpoToken(expoTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/expo/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchExpoToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteExpoToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/fcm/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listFcmTokens({\n      limit: 10,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, FcmTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const fcmTokenPayloadInstallationId = FcmTokenPayloadInstallationId.DEVELOPMENT;\n  \n  const fcmTokenPayload: FcmTokenPayload = {\t\n    deviceToken: \"exeuin pariatur\",\n    installationId: fcmTokenPayloadInstallationId\n  };\n\n  const { data } = await client.channels.saveFcmToken(fcmTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/mobile_push/fcm/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchFcmToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteFcmToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/slack/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listSlackTokens({\n      limit: 2,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, SlackTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const slackTokenPayloadOauth: SlackTokenPayloadOauth = {\t\n    channelId: \"channel_id\",\n    installationId: \"installation_id\",\n    scope: \"scope\"\n  };\n  \n  \n  const slackTokenPayloadWebhook: SlackTokenPayloadWebhook = {\t\n    url: \"url\"\n  };\n  \n  const slackTokenPayload: SlackTokenPayload = {\t\n    oauth: slackTokenPayloadOauth,\n    webhook: slackTokenPayloadWebhook\n  };\n\n  const { data } = await client.channels.saveSlackToken(slackTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/slack/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchSlackToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteSlackToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/teams/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listTeamsTokens({\n      limit: 9,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, TeamsTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const teamsTokenPayloadWebhook: TeamsTokenPayloadWebhook = {\t\n    url: \"url\"\n  };\n  \n  const teamsTokenPayload: TeamsTokenPayload = {\t\n    webhook: teamsTokenPayloadWebhook\n  };\n\n  const { data } = await client.channels.saveTeamsToken(teamsTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/teams/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchTeamsToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteTeamsToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/channels/user_preferences": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchUserPreferences();\n\n  console.log(data);\n})();\n",
      "put": "import { Client, UserPreferences } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const channels: Channels = {\t\n    enabled: true,\n    name: \"name\"\n  };\n  \n  const categories: Categories = {\t\n    channels: [channels],\n    key: \"key\",\n    label: \"label\"\n  };\n  \n  const userPreferences: UserPreferences = {\t\n    categories: [categories]\n  };\n\n  const { data } = await client.channels.saveUserPreferences(userPreferences);\n\n  console.log(data);\n})();\n"
    },
    "/channels/web_push/tokens": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listWebPushTokens({\n      limit: 9,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
      "put": "import { Client, WebPushTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const webPushTokenPayloadKeys: WebPushTokenPayloadKeys = {\t\n    auth: \"auth\",\n    p256dh: \"p256dh\"\n  };\n  \n  const webPushTokenPayload: WebPushTokenPayload = {\t\n    endpoint: \"endpoint\",\n    keys: webPushTokenPayloadKeys\n  };\n\n  const { data } = await client.channels.saveWebPushToken(webPushTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/channels/web_push/tokens/{token_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.fetchWebPushToken(\"token_id\");\n\n  console.log(data);\n})();\n",
      "delete": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.deleteWebPushToken(\"token_id\");\n\n  console.log(data);\n})();\n"
    },
    "/integrations/inbox/installations": {
      "put": "import { Client, InboxConfigPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const images: Images = {\t\n    emptyInboxUrl: \"emptyInboxUrl\"\n  };\n  \n  \n  const banner: Banner = {\t\n    backgroundColor: \"backgroundColor\",\n    backgroundOpacity: 3.04,\n    fontSize: \"fontSize\",\n    textColor: \"textColor\"\n  };\n  \n  \n  const dialog: Dialog = {\t\n    accentColor: \"accentColor\",\n    backgroundColor: \"backgroundColor\",\n    textColor: \"textColor\"\n  };\n  \n  \n  const footer: Footer = {\t\n    backgroundColor: \"backgroundColor\",\n    borderRadius: \"borderRadius\",\n    fontSize: \"fontSize\",\n    textColor: \"textColor\"\n  };\n  \n  \n  const header: Header = {\t\n    backgroundColor: \"backgroundColor\",\n    borderRadius: \"borderRadius\",\n    fontFamily: \"fontFamily\",\n    fontSize: \"fontSize\",\n    textColor: \"textColor\"\n  };\n  \n  \n  const icon: Icon = {\t\n    borderColor: \"borderColor\",\n    width: \"width\"\n  };\n  \n  \n  const defaultHover: DefaultHover = {\t\n    backgroundColor: \"backgroundColor\"\n  };\n  \n  \n  const defaultState: DefaultState = {\t\n    color: \"color\"\n  };\n  \n  const default_: Default_ = {\t\n    backgroundColor: \"backgroundColor\",\n    borderRadius: \"borderRadius\",\n    fontFamily: \"fontFamily\",\n    fontSize: \"fontSize\",\n    hover: defaultHover,\n    margin: \"margin\",\n    state: defaultState,\n    textColor: \"textColor\"\n  };\n  \n  \n  const unreadHover: UnreadHover = {\t\n    backgroundColor: \"backgroundColor\"\n  };\n  \n  \n  const unreadState: UnreadState = {\t\n    color: \"color\"\n  };\n  \n  const unread: Unread = {\t\n    backgroundColor: \"backgroundColor\",\n    hover: unreadHover,\n    state: unreadState,\n    textColor: \"textColor\"\n  };\n  \n  \n  const unseenHover: UnseenHover = {\t\n    backgroundColor: \"backgroundColor\"\n  };\n  \n  \n  const unseenState: UnseenState = {\t\n    color: \"color\"\n  };\n  \n  const unseen: Unseen = {\t\n    backgroundColor: \"backgroundColor\",\n    hover: unseenHover,\n    state: unseenState,\n    textColor: \"textColor\"\n  };\n  \n  const themeNotification: ThemeNotification = {\t\n    default: default_,\n    unread: unread,\n    unseen: unseen\n  };\n  \n  \n  const unseenBadge: UnseenBadge = {\t\n    backgroundColor: \"backgroundColor\"\n  };\n  \n  const theme: Theme = {\t\n    banner: banner,\n    dialog: dialog,\n    footer: footer,\n    header: header,\n    icon: icon,\n    notification: themeNotification,\n    unseenBadge: unseenBadge\n  };\n  \n  const inboxConfigPayload: InboxConfigPayload = {\t\n    images: images,\n    locale: \"locale\",\n    theme: theme\n  };\n\n  const { data } = await client.integrations.saveInboxInstallation(inboxConfigPayload);\n\n  console.log(data);\n})();\n"
    },
    "/integrations/inbox/installations/start": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.integrations.startInboxInstallation();\n\n  console.log(data);\n})();\n"
    },
    "/integrations/slack/installations": {
      "put": "import { Client, SlackInstallation } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const authedUser: AuthedUser = {\t\n    accessToken: \"access_token\",\n    expiresIn: 2,\n    id: \"id\",\n    refreshToken: \"refresh_token\",\n    scope: \"scope\",\n    tokenType: \"token_type\"\n  };\n  \n  \n  const enterprise: Enterprise = {\t\n    id: \"id\",\n    name: \"name\"\n  };\n  \n  \n  const incomingWebhook: IncomingWebhook = {\t\n    channel: \"channel\",\n    configurationUrl: \"configuration_url\",\n    url: \"url\"\n  };\n  \n  \n  const team: Team = {\t\n    id: \"id\",\n    name: \"name\"\n  };\n  \n  const slackInstallation: SlackInstallation = {\t\n    accessToken: \"access_token\",\n    appId: \"app_id\",\n    authedUser: authedUser,\n    botUserId: \"bot_user_id\",\n    enterprise: enterprise,\n    expiresIn: 2,\n    id: \"9-9*Lr:yL.n\",\n    incomingWebhook: incomingWebhook,\n    isEnterpriseInstall: true,\n    refreshToken: \"refresh_token\",\n    scope: \"scope\",\n    team: team,\n    tokenType: \"token_type\"\n  };\n\n  const { data } = await client.integrations.saveSlackInstallation(slackInstallation);\n\n  console.log(data);\n})();\n"
    },
    "/integrations/slack/installations/finish": {
      "post": "import { Client, SlackFinishInstallResponse } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const slackFinishInstallResponse: SlackFinishInstallResponse = {\t\n    appId: \"app_id\",\n    code: \"code\",\n    redirectUrl: \"redirect_url\"\n  };\n\n  const { data } = await client.integrations.finishSlackInstallation(slackFinishInstallResponse);\n\n  console.log(data);\n})();\n"
    },
    "/integrations/slack/installations/start": {
      "post": "import { Client, SlackStartInstall } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const slackStartInstall: SlackStartInstall = {\t\n    appId: \"app_id\",\n    authUrl: \"auth_url\",\n    extraScopes: [\"extra_scopes\"],\n    redirectUrl: \"redirect_url\"\n  };\n\n  const { data } = await client.integrations.startSlackInstallation(slackStartInstall);\n\n  console.log(data);\n})();\n"
    },
    "/integrations/web_push/installations": {
      "put": "import { Client, WebPushTokenPayload } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  \n  const webPushTokenPayloadKeys: WebPushTokenPayloadKeys = {\t\n    auth: \"auth\",\n    p256dh: \"p256dh\"\n  };\n  \n  const webPushTokenPayload: WebPushTokenPayload = {\t\n    endpoint: \"endpoint\",\n    keys: webPushTokenPayloadKeys\n  };\n\n  const { data } = await client.integrations.saveWebPushInstallation(webPushTokenPayload);\n\n  console.log(data);\n})();\n"
    },
    "/integrations/web_push/installations/start": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.integrations.startWebPushInstallation();\n\n  console.log(data);\n})();\n"
    },
    "/notifications": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.listNotifications({\n      limit: 6,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n      status: \"status\",\n      category: \"category\",\n      topic: \"topic\",\n  });\n\n  console.log(data);\n})();\n"
    },
    "/notifications/archive": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.archiveAllNotifications({\n      category: \"category\",\n      topic: \"topic\",\n  });\n\n  console.log(data);\n})();\n"
    },
    "/notifications/read": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.markAllNotificationsRead({\n      category: \"category\",\n      topic: \"topic\",\n  });\n\n  console.log(data);\n})();\n"
    },
    "/notifications/{notification_id}": {
      "get": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.fetchNotification(\"notification_id\");\n\n  console.log(data);\n})();\n"
    },
    "/notifications/{notification_id}/archive": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.archiveNotification(\"notification_id\");\n\n  console.log(data);\n})();\n"
    },
    "/notifications/{notification_id}/read": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.markNotificationRead(\"notification_id\");\n\n  console.log(data);\n})();\n"
    },
    "/notifications/{notification_id}/unarchive": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.unarchiveNotification(\"notification_id\");\n\n  console.log(data);\n})();\n"
    },
    "/notifications/{notification_id}/unread": {
      "post": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.notifications.markNotificationUnread(\"notification_id\");\n\n  console.log(data);\n})();\n"
    }
  },
  "example": "import { Client } from 'magicbell-js/user-client';\n\n(async () => {\n  const client = new Client({\n\ttoken: 'YOUR_TOKEN',\n});\n\n  const { data } = await client.channels.listInboxTokens({\n      limit: 3,\n      startingAfter: \"starting_after\",\n      endingBefore: \"ending_before\",\n  });\n\n  console.log(data);\n})();\n",
  "authentication": {
    "bearer": {
      "constructor": "const sdk = new Client({ token: 'YOUR_TOKEN' });",
      "setter": "const sdk = new Client();\nsdk.token = 'YOUR_TOKEN';"
    }
  }
}
